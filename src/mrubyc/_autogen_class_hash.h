/* Auto generated by make_method_table.rb */
#include "_autogen_builtin_symbol.h"

/*===== Hash class =====*/
static const mrbc_sym method_symbols_Hash[] = {
  MRBC_SYM(BL_BR),
  MRBC_SYM(BL_BR_EQ),
  MRBC_SYM(clear),
  MRBC_SYM(count),
  MRBC_SYM(delete),
  MRBC_SYM(dup),
  MRBC_SYM(empty_Q),
  MRBC_SYM(has_key_Q),
  MRBC_SYM(has_value_Q),
#if MRBC_USE_STRING
  MRBC_SYM(inspect),
#endif
  MRBC_SYM(key),
  MRBC_SYM(keys),
  MRBC_SYM(length),
  MRBC_SYM(merge),
  MRBC_SYM(merge_E),
  MRBC_SYM(new),
  MRBC_SYM(size),
  MRBC_SYM(to_h),
#if MRBC_USE_STRING
  MRBC_SYM(to_s),
#endif
  MRBC_SYM(values),
};

static const mrbc_func_t method_functions_Hash[] = {
  c_hash_get,
  c_hash_set,
  c_hash_clear,
  c_hash_size,
  c_hash_delete,
  c_hash_dup,
  c_hash_empty,
  c_hash_has_key,
  c_hash_has_value,
#if MRBC_USE_STRING
  c_hash_inspect,
#endif
  c_hash_key,
  c_hash_keys,
  c_hash_size,
  c_hash_merge,
  c_hash_merge_self,
  c_hash_new,
  c_hash_size,
  c_ineffect,
#if MRBC_USE_STRING
  c_hash_inspect,
#endif
  c_hash_values,
};

struct RBuiltinClass mrbc_class_Hash = {
  .sym_id = MRBC_SYM(Hash),
  .num_builtin_method = sizeof(method_symbols_Hash) / sizeof(mrbc_sym),
  .super = MRBC_CLASS(Object),
  .method_link = 0,
#if defined(MRBC_DEBUG)
  .name = "Hash",
#endif
  .method_symbols = method_symbols_Hash,
  .method_functions = method_functions_Hash,
};
